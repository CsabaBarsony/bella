(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var cs = require('../helpers/cs');

var QuestListPage = React.createClass({
	displayName: 'QuestListPage',

	componentDidMount: function componentDidMount() {
		bella.event.subscribe('userStatusChange', function (options, emitter) {
			console.log('user status change', options.status);
		});
	},
	render: function render() {
		return React.createElement(
			'div',
			{ className: 'bc-quest-list-page' },
			React.createElement(
				'h1',
				null,
				'Quests'
			),
			React.createElement(QuestList, null)
		);
	}
});

var QuestList = React.createClass({
	displayName: 'QuestList',

	getInitialState: function getInitialState() {
		return { questList: {} };
	},
	componentDidMount: function componentDidMount() {
		var _this = this;

		cs.get('quest_list', function (response) {
			_this.setState({ questList: response.data });
		});
	},
	render: function render() {
		var questList = _.map(this.state.questList, function (quest, key) {
			return React.createElement(Quest, {
				key: key,
				questId: quest.id,
				title: quest.title,
				description: quest.description });
		});

		return React.createElement(
			'div',
			{ className: 'bc-quest-list' },
			questList
		);
	}
});

var Quest = React.createClass({
	displayName: 'Quest',

	render: function render() {
		var link = '/quest.html?quest_id=' + this.props.questId;

		return React.createElement(
			'div',
			{ className: 'bc-quest' },
			React.createElement(
				'div',
				null,
				React.createElement(
					'span',
					null,
					'title: '
				),
				React.createElement(
					'a',
					{ href: link },
					this.props.title
				)
			)
		);
	}
});

ReactDOM.render(React.createElement(QuestListPage, null), document.getElementById('main-section'));

},{"../helpers/cs":2}],2:[function(require,module,exports){
'use strict';

var cs = {
	log: function log(text) {
		console.log(text);
	},
	get: function get(url, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax get error');
				}
			}
		};
		xhr.open('GET', url);
		xhr.send();
	},
	post: function post(url, data, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax post error');
				}
			}
		};
		xhr.open('POST', url);
		xhr.setRequestHeader('Content-type', 'application/json');
		xhr.send(JSON.stringify(data));
	},
	cookie: function cookie(name, cookies) {
		var c = this.cookies(cookies);
		return c[name];
	},
	cookies: function cookies(_cookies) {
		var nameValues = _cookies.split('; ');
		var result = {};
		nameValues.forEach(function (item) {
			var i = item.split('=');
			result[i[0]] = i[1];
		});
		return result;
	},
	getQueryValue: function getQueryValue(queryString, name) {
		var arr = queryString.match(new RegExp(name + '=([^&]+)'));

		if (arr) {
			return arr[1];
		} else {
			return null;
		}
	}
};

var tests = [{
	id: 1,
	test: function test() {
		var cookies = {
			csati: 'majom',
			one: 'two'
		};

		var result = true;

		var c = cs.cookies('csati=majom; one=two');

		if (c.csati !== cookies.csati) result = false;

		return result;
	}
}, {
	id: 2,
	test: function test() {
		return 'bar' === cs.cookie('foo', 'foo=bar; te=majom');
	}
}, {
	id: 3,
	test: function test() {
		return '123' === cs.getQueryValue('?csati=majom&user_id=123&valami=semmi', 'user_id');
	}
}];

if (false) {
	var result = true;
	tests.forEach(function (test) {
		if (!test.test()) {
			console.error(test.id + '. test failed');
			result = false;
		}
	});
	if (result) {
		console.log('All tests succeeded!');
	}
}

module.exports = cs;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
