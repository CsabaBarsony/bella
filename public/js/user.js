(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var cs = require('../../helpers/cs');

var User = React.createClass({
	displayName: 'User',

	getInitialState: function getInitialState() {
		return {
			status: 'init',
			opened: false,
			errorMessage: ''
		};
	},
	componentDidMount: function componentDidMount() {
		var _this = this;

		if (cs.cookie('user_id', document.cookie) && cs.cookie('token', document.cookie)) {
			cs.get('userstatus', function (response) {
				if (response.status === 'guest') {
					_this.setState({ status: 'guest' });
					bella.event.emit('userStatusChange', { status: response.status }, _this);
				} else if (response.status === 'loggedIn') {
					bella.event.emit('userStatusChange', { status: response.status }, _this);
					_this.setState({
						status: 'loggedIn',
						user: response.data
					});
				}
			});
		} else {
			this.setState({ status: 'guest' });
		}
	},
	render: function render() {
		if (this.state.status === 'init') {
			return React.createElement(
				'div',
				null,
				'initializing...'
			);
		} else if (this.state.status === 'guest') {
			var errorMessage = this.state.errorMessage ? React.createElement(
				'div',
				null,
				this.state.errorMessage
			) : null;

			var popup = this.state.opened ? React.createElement(
				'div',
				{ className: 'bc-user-popup' },
				errorMessage,
				React.createElement('input', { type: 'text', ref: 'name', defaultValue: 'a' }),
				React.createElement('br', null),
				React.createElement('input', { type: 'text', ref: 'password', defaultValue: '1' }),
				React.createElement('br', null),
				React.createElement(
					'button',
					{ onClick: this.login },
					'Login'
				)
			) : null;

			return React.createElement(
				'div',
				{ className: 'bc-user' },
				React.createElement(
					'a',
					{ href: '', onClick: this.click },
					'user'
				),
				popup
			);
		} else if (this.state.status === 'loggedIn') {
			var popup = this.state.opened ? React.createElement(
				'div',
				{ className: 'bc-user-popup' },
				React.createElement(
					'a',
					{ href: '', onClick: this.logout },
					'logout'
				)
			) : null;

			return React.createElement(
				'div',
				{ className: 'bc-user' },
				React.createElement(
					'a',
					{ href: '', onClick: this.click },
					this.state.user.name
				),
				popup
			);
		}
	},
	click: function click(e) {
		e.preventDefault();
		this.setState({ opened: !this.state.opened });
	},
	login: function login() {
		var _this2 = this;

		cs.post('login', {
			username: this.refs.name.value,
			password: this.refs.password.value
		}, function (response) {
			if (response.status === 'loggedIn') {
				bella.event.emit('userStatusChange', { status: response.status }, _this2);
				_this2.setState({
					errorMessage: '',
					status: 'loggedIn',
					user: response.data,
					opened: false
				});
			} else if (response.status === 'guest') {
				bella.event.emit('userStatusChange', { status: response.status }, _this2);
				_this2.setState({ errorMessage: response.errorMessage });
			}
		});
	},
	logout: function logout(e) {
		var _this3 = this;

		e.preventDefault();
		cs.get('logout', function (response) {
			if (response.status === 'guest') {
				bella.event.emit('userStatusChange', { status: response.status }, _this3);
				_this3.setState({
					status: 'guest',
					username: '',
					opened: false
				});
			}
		});
	}
});

ReactDOM.render(React.createElement(User, null), document.getElementById('bc-user-container'));

},{"../../helpers/cs":2}],2:[function(require,module,exports){
'use strict';

var cs = {
	log: function log(text) {
		console.log(text);
	},
	get: function get(url, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax get error');
				}
			}
		};
		xhr.open('GET', url);
		xhr.send();
	},
	post: function post(url, data, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax post error');
				}
			}
		};
		xhr.open('POST', url);
		xhr.setRequestHeader('Content-type', 'application/json');
		xhr.send(JSON.stringify(data));
	},
	cookie: function cookie(name, cookies) {
		var c = this.cookies(cookies);
		return c[name];
	},
	cookies: function cookies(_cookies) {
		var nameValues = _cookies.split('; ');
		var result = {};
		nameValues.forEach(function (item) {
			var i = item.split('=');
			result[i[0]] = i[1];
		});
		return result;
	},
	getQueryValue: function getQueryValue(queryString, name) {
		var arr = queryString.match(new RegExp(name + '=([^&]+)'));

		if (arr) {
			return arr[1];
		} else {
			return null;
		}
	}
};

var tests = [{
	id: 1,
	test: function test() {
		var cookies = {
			csati: 'majom',
			one: 'two'
		};

		var result = true;

		var c = cs.cookies('csati=majom; one=two');

		if (c.csati !== cookies.csati) result = false;

		return result;
	}
}, {
	id: 2,
	test: function test() {
		return 'bar' === cs.cookie('foo', 'foo=bar; te=majom');
	}
}, {
	id: 3,
	test: function test() {
		return '123' === cs.getQueryValue('?csati=majom&user_id=123&valami=semmi', 'user_id');
	}
}];

if (false) {
	var result = true;
	tests.forEach(function (test) {
		if (!test.test()) {
			console.error(test.id + '. test failed');
			result = false;
		}
	});
	if (result) {
		console.log('All tests succeeded!');
	}
}

module.exports = cs;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
