(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var cs = require('../helpers/cs');
var Quest = require('../classes').Quest;
var User = require('../classes').User;

var QuestPage = React.createClass({
	displayName: 'QuestPage',

	getInitialState: function getInitialState() {
		return {
			status: 'init',
			quest: {}
		};
	},
	componentDidMount: function componentDidMount() {
		var _this = this;

		var questId = cs.getQueryValue(document.location.search, 'quest_id');

		bella.event.subscribe('userStatusChange', function (details) {
			_this.setState({ status: details.status });
		});

		if (questId) {
			cs.get('/quest?quest_id=' + questId, function (response) {
				if (response.result === 'success') {
					_this.setState({
						quest: response.data,
						status: 'ready'
					});
				} else if (response.result === 'fail') {
					_this.setState({
						status: 'not_found'
					});
				} else {
					console.error('Quest request error');
					_this.setState({
						status: 'error'
					});
				}
			});
		} else {
			this.setState({
				quest: new Quest(),
				status: 'ready'
			});
		}
	},
	render: function render() {
		var page;

		if (this.state.status === 'init') {
			page = React.createElement(
				'div',
				null,
				'init'
			);
		} else if (this.state.status === 'not_found') {
			page = React.createElement(
				'div',
				null,
				'not found'
			);
		} else if (this.state.status === 'error') {
			page = React.createElement(
				'div',
				null,
				'error'
			);
		}
		// Itt tartok: account status �s component status �sszevesznek.
		else if (this.state.status === 'ready') {
				page = React.createElement(
					'div',
					{ className: 'bc-quest-page' },
					React.createElement(
						'h1',
						null,
						'Quest'
					),
					React.createElement(RCQuest, {
						quest: this.state.quest,
						own: this.state.quest.user.id === cs.cookie('user_id', document.cookie),
						loggedIn: this.state.status === 'loggedIn' })
				);
			}

		return page;
	}
});

var RCQuest = React.createClass({
	displayName: 'RCQuest',

	getInitialState: function getInitialState() {
		return { edit: !this.props.quest.id };
	},
	render: function render() {
		var toggleEditButton = this.props.own && this.props.loggedIn ? React.createElement(
			'button',
			{ onClick: this.toggleEdit },
			this.state.edit ? 'Cancel' : 'Edit'
		) : null;
		var saveButton = this.props.quest.dirty ? React.createElement(
			'button',
			null,
			'Save'
		) : null;
		var title = this.props.quest.id ? React.createElement(
			'span',
			null,
			this.props.quest.title
		) : React.createElement('input', { type: 'text', defaultValue: this.props.quest.title });
		var description = this.props.quest.id ? React.createElement(
			'span',
			null,
			this.props.quest.description
		) : React.createElement('textarea', { cols: '30', rows: '10', defaultValue: this.props.quest.description });
		var user = this.props.quest.user ? React.createElement(
			'span',
			null,
			this.props.quest.user.name
		) : null;

		return React.createElement(
			'div',
			null,
			React.createElement(
				'span',
				null,
				'user: '
			),
			user,
			React.createElement('br', null),
			React.createElement(
				'span',
				null,
				'title: '
			),
			title,
			React.createElement('br', null),
			React.createElement(
				'span',
				null,
				'description: '
			),
			description,
			React.createElement('br', null),
			saveButton,
			toggleEditButton
		);
	},
	toggleEdit: function toggleEdit() {
		this.setState({ edit: !this.state.edit });
	}
});

ReactDOM.render(React.createElement(QuestPage, null), document.getElementById('main-section'));

},{"../classes":2,"../helpers/cs":3}],2:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

module.exports = {
	Quest: function Quest(id, userId) {
		var title = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];
		var description = arguments.length <= 3 || arguments[3] === undefined ? '' : arguments[3];
		var dirty = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

		_classCallCheck(this, Quest);

		this.id = id;
		this.userId = userId;
		this.title = title;
		this.description = description;
		this.dirty = dirty;
	}
};

},{}],3:[function(require,module,exports){
'use strict';

var cs = {
	log: function log(text) {
		console.log(text);
	},
	get: function get(url, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax get error');
				}
			}
		};
		xhr.open('GET', url);
		xhr.send();
	},
	post: function post(url, data, success) {
		var xhr = new XMLHttpRequest();

		xhr.onreadystatechange = function () {
			if (xhr.readyState === XMLHttpRequest.DONE) {
				if (xhr.status === 200) {
					success(JSON.parse(xhr.response));
				} else {
					console.error('ajax post error');
				}
			}
		};
		xhr.open('POST', url);
		xhr.setRequestHeader('Content-type', 'application/json');
		xhr.send(JSON.stringify(data));
	},
	cookie: function cookie(name, cookies) {
		var c = this.cookies(cookies);
		return c[name];
	},
	cookies: function cookies(_cookies) {
		var nameValues = _cookies.split('; ');
		var result = {};
		nameValues.forEach(function (item) {
			var i = item.split('=');
			result[i[0]] = i[1];
		});
		return result;
	},
	getQueryValue: function getQueryValue(queryString, name) {
		var arr = queryString.match(new RegExp(name + '=([^&]+)'));

		if (arr) {
			return arr[1];
		} else {
			return null;
		}
	}
};

var tests = [{
	id: 1,
	test: function test() {
		var cookies = {
			csati: 'majom',
			one: 'two'
		};

		var result = true;

		var c = cs.cookies('csati=majom; one=two');

		if (c.csati !== cookies.csati) result = false;

		return result;
	}
}, {
	id: 2,
	test: function test() {
		return 'bar' === cs.cookie('foo', 'foo=bar; te=majom');
	}
}, {
	id: 3,
	test: function test() {
		return '123' === cs.getQueryValue('?csati=majom&user_id=123&valami=semmi', 'user_id');
	}
}];

if (false) {
	var result = true;
	tests.forEach(function (test) {
		if (!test.test()) {
			console.error(test.id + '. test failed');
			result = false;
		}
	});
	if (result) {
		console.log('All tests succeeded!');
	}
}

module.exports = cs;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
